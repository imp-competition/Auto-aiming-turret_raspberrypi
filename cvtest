# -*- coding: utf-8 -*-
"""
방법3: 픽셀 기반 각도 변환 + 틸트 보정 적용
"""

import cv2 as cv
import numpy as np
import math
import time

# -------------------------------
# 기본 설정
# -------------------------------
FRAME_W, FRAME_H = 1280, 720
HFOV_DEG = 62.2
VFOV_DEG = 48.8

# 총구(화면 내 기준 좌표) [픽셀 단위]
MUZZLE_PX = FRAME_W // 2
MUZZLE_PY = FRAME_H // 2 + 100

# 서보 중심 및 제한
SERVO_CENTER_PAN  = 1500
SERVO_CENTER_TILT = 1500
PAN_MIN, PAN_MAX  = 1100, 1900
TILT_MIN, TILT_MAX = 1100, 1900

SIGN_PAN  = +1
SIGN_TILT = -1  # 틸트 서보 반전

# [NEW] 틸트 보정 (도 단위) — 음수면 '내림'
TILT_BIAS_DEG = -3.0

# -------------------------------
# 유틸 함수
# -------------------------------
def draw_text(img, text, org, color=(0,255,0)):
    cv.putText(img, text, org, cv.FONT_HERSHEY_SIMPLEX, 0.7, color, 2, cv.LINE_AA)

def delta_to_servo_angles(cmd_deg_x, cmd_deg_y, tilt_bias_deg=0.0):
    pan  = SERVO_CENTER_PAN  + SIGN_PAN  * cmd_deg_x
    tilt = SERVO_CENTER_TILT + SIGN_TILT * cmd_deg_y

    # [NEW] 틸트 bias 적용
    tilt = tilt + int(round(tilt_bias_deg))

    pan  = max(PAN_MIN,  min(PAN_MAX,  int(pan)))
    tilt = max(TILT_MIN, min(TILT_MAX, int(tilt)))
    return pan, tilt

# -------------------------------
# 메인
# -------------------------------
cap = cv.VideoCapture(0)
if not cap.isOpened():
    print("Camera open failed")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        break

    vis = frame.copy()

    # 예시: 임시 타겟 = 화면 중심
    target_cx, target_cy = FRAME_W//2, FRAME_H//2

    # muzzle 대비 픽셀 오프셋
    dx_px = target_cx - MUZZLE_PX
    dy_px = target_cy - MUZZLE_PY

    # 픽셀 → 각도 변환 (방법3: 단순 비례식)
    cmd_deg_x = (dx_px / float(FRAME_W)) * HFOV_DEG
    cmd_deg_y = (dy_px / float(FRAME_H)) * VFOV_DEG

    # 서보 값 계산 (bias 적용)
    servo_pan, servo_tilt = delta_to_servo_angles(cmd_deg_x, cmd_deg_y, tilt_bias_deg=TILT_BIAS_DEG)

    # [TODO] 실제 서보 출력: motors.send_servo(servo_pan, servo_tilt)

    # HUD 표시
    draw_text(vis, f"DX_px:{dx_px:+d}, DY_px:{dy_px:+d}", (20,30))
    draw_text(vis, f"CMD_deg_x:{cmd_deg_x:+.1f}, CMD_deg_y:{cmd_deg_y:+.1f}", (20,60))
    draw_text(vis, f"ServoPan:{servo_pan}, ServoTilt:{servo_tilt}", (20,90))
    draw_text(vis, f"TILT_BIAS: {TILT_BIAS_DEG:+.1f} deg", (FRAME_W-260,30))  # [NEW]

    cv.imshow("aim", vis)

    # 키 입력 처리
    key = cv.waitKey(1) & 0xFF
    if key == 27 or key == ord('q'):
        break
    elif key == ord('j'):   # [NEW] tilt 내려감
        TILT_BIAS_DEG -= 1.0
    elif key == ord('k'):   # [NEW] tilt 올라감
        TILT_BIAS_DEG += 1.0
    elif key == ord('0'):   # [NEW] bias 리셋
        TILT_BIAS_DEG = 0.0
    elif key == ord('c'):   # [NEW] 자동 캘리브레이션 (간단)
        dy_px = target_cy - MUZZLE_PY
        deg_y = (dy_px / float(FRAME_H)) * VFOV_DEG
        TILT_BIAS_DEG = -deg_y
        print(f"Auto calib: dy_px={dy_px}, deg_y={deg_y:.2f} => bias={TILT_BIAS_DEG:.2f}")

cap.release()
cv.destroyAllWindows()
